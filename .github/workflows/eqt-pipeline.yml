name: EQT Pipeline Automation (V4)

on:
  issues:
    types: [opened]
  workflow_dispatch:

permissions:
  contents: read
  issues: write

jobs:
  automate-status:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: "New Issue -> Add to Project and Set Stage"
        if: github.event_name == 'issues' && github.event.action == 'opened'
        uses: actions/github-script@v7
        env:
          GH_PAT: ${{ secrets.GH_PROJECT_PAT }}
          EQT_PROJECT_NODE_ID: ${{ secrets.EQT_PROJECT_NODE_ID }}
          STATUS_FIELD_ID: ${{ secrets.STATUS_FIELD_ID }}
          SEED_OPTION_ID: ${{ secrets.SEED_OPTION_ID }}
        with:
          github-token: ${{ secrets.GH_PROJECT_PAT }}
          script: |
            const clean = (v) => v ? v.trim().replace(/^"|"$/g, '') : v;

            const projectId = clean(process.env.EQT_PROJECT_NODE_ID);
            const fieldId = clean(process.env.STATUS_FIELD_ID);
            const optionId = clean(process.env.SEED_OPTION_ID);

            try {
              core.info(`Using projectId=${projectId}`);
              core.info(`Using fieldId=${fieldId}`);
              core.info(`Using optionId=${optionId}`);

              // 1Ô∏è‚É£ Add Issue to ProjectV2
              const addMutation = `
                mutation($projectId: ID!, $contentId: ID!) {
                  addProjectV2ItemById(input: {
                    projectId: $projectId,
                    contentId: $contentId
                  }) {
                    item { id }
                  }
                }
              `;
              const addResult = await github.graphql(addMutation, {
                projectId,
                contentId: context.payload.issue.node_id
              });
              const itemId = addResult.addProjectV2ItemById.item.id;
              core.info(`Added issue to project, itemId=${itemId}`);

              // 2Ô∏è‚É£ Update Project field to "Seed"
              const updateMutation = `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: ID!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: {singleSelectOptionId: $optionId}
                  }) {
                    projectV2Item { id }
                  }
                }
              `;
              await github.graphql(updateMutation, {
                projectId,
                itemId,
                fieldId,
                optionId
              });
              core.info("Updated project field status to Seed");

              // 3Ô∏è‚É£ Add label
              await github.rest.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ["seed"]
              });
              core.info("Added label: seed");

              // 4Ô∏è‚É£ Update Issue template
              const template = [
                "## üéØ EQTÁ†îÁ©∂ÊµÅÁ®ã",
                "",
                "**ÂΩìÂâçÈò∂ÊÆµ**: Êñ∞ËäΩ",
                "**‰ºòÂÖàÁ∫ß**: [ËØ∑ÈÄâÊã©]",
                "**È¢ÜÂüü**: [ËØ∑ÈÄâÊã©]",
                "**AIÈúÄÊ±Ç**:",
                "**È¢ÑÊµã**:",
                "**‰∏ìÂÆ∂**:",
                "",
                "---",
                "*Áî± EQT Pipeline Ëá™Âä®ÂàõÂª∫*"
              ].join("\n");

              const originalBody = context.payload.issue.body || "";
              await github.rest.issues.update({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: template + "\n\n" + originalBody
              });
              core.info("Updated issue body successfully");

            } catch (error) {
              core.setFailed(`Âá∫ÈîôÂï¶: ${error.message}`);
              if (error.errors) {
                core.error(JSON.stringify(error.errors, null, 2));
              }
            }
