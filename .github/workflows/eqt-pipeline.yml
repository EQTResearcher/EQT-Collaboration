name: EQT Kanban Advanced Automation (Enhanced with Project Query)

on:
  workflow_dispatch:
    inputs:
      contentType:
        description: 'Content Type (Issue 或 PullRequest)'
        required: true
        default: 'Issue'
        type: choice
        options:
          - Issue
          - PullRequest
      contentNumber:
        description: 'Issue 或 PR 编号'
        required: true
        type: number
        default: "000001"
      triggerAI:
        description: '同时触发 AI Bot 分析'
        required: false
        type: boolean
        default: false
  issues:
    types: [opened, labeled, unlabeled, closed, reopened, edited]
  pull_request:
    types: [opened, closed, reopened, ready_for_review, edited, labeled, unlabeled]
  project_card:
    types: [created, moved, deleted]

permissions:
  contents: read
  issues: write

jobs:
  # ==============================================================
  # 🧭 阶段 1：查询项目信息（字段 + 选项）
  # ==============================================================
  query-project-info:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4

      - name: "🔍 查询 EQT 项目信息 (字段与选项)"
        uses: actions/github-script@v7
        env:
          GH_PAT: ${{ secrets.GH_PROJECT_PAT }}
          EQT_PROJECT_NODE_ID: ${{ secrets.EQT_PROJECT_NODE_ID }}
        with:
          github-token: ${{ secrets.GH_PROJECT_PAT }}
          script: |
            try {
              const projectId = process.env.EQT_PROJECT_NODE_ID.trim();
              core.info(`🚀 正在查询项目字段信息: ${projectId}`);

              // ✅ 修正版查询：Union类型必须展开
              const query = `
              query {
                node(id: "${projectId}") {
                  ... on ProjectV2 {
                    id
                    title
                    fields(first: 50) {
                      nodes {
                        __typename
                        id
                        name
                        dataType
                        ... on ProjectV2SingleSelectField {
                          options {
                            id
                            name
                          }
                        }
                        ... on ProjectV2IterationField {
                          configuration {
                            duration
                            startDay
                          }
                        }
                        ... on ProjectV2Field {
                          id
                          name
                          dataType
                        }
                      }
                    }
                  }
                }
              }`;

              const result = await github.graphql(query);
              const project = result.node;

              if (!project) {
                core.setFailed("❌ 未找到项目，请检查 EQT_PROJECT_NODE_ID 是否正确。");
                return;
              }

              core.info(`📘 项目标题: ${project.title}`);
              core.info(`📦 Project ID: ${project.id}`);
              core.info("🧩 字段详情如下：");

              for (const field of project.fields.nodes) {
                core.info(`\n🔹 字段名称: ${field.name}`);
                core.info(`   ├─ 类型: ${field.__typename}`);
                core.info(`   ├─ 字段ID: ${field.id}`);
                if (field.options) {
                  for (const opt of field.options) {
                    core.info(`   │   └─ 选项: ${opt.name} (${opt.id})`);
                  }
                }
              }

              core.info("✅ 查询成功！你现在可以在日志中查找 STATUS_FIELD_ID 与 🌱 新芽 Option ID。");

            } catch (error) {
              core.setFailed(`❌ 查询失败: ${error.message}`);
              if (error.errors) {
                core.error(JSON.stringify(error.errors, null, 2));
              }
            }

  # ==============================================================
  # 🌱 阶段 2：新 Issue 自动加入项目 & 初始化状态
  # ==============================================================
  automate-status:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: "🌱 新 Issue 自动添加到项目并设为新芽"
        if: github.event_name == 'issues' && github.event.action == 'opened'
        uses: actions/github-script@v7
        env:
          GH_PAT: ${{ secrets.GH_PROJECT_PAT }}
          EQT_PROJECT_NODE_ID: ${{ secrets.EQT_PROJECT_NODE_ID }}
          STATUS_FIELD_ID: ${{ secrets.STATUS_FIELD_ID }}
          SEED_OPTION_ID: ${{ secrets.SEED_OPTION_ID }}
        with:
          github-token: ${{ secrets.GH_PROJECT_PAT }}
          script: |
            try {
              const projectId = process.env.EQT_PROJECT_NODE_ID.trim();
              const fieldId = process.env.STATUS_FIELD_ID.trim();
              const optionId = process.env.SEED_OPTION_ID.trim();
              const issueNodeId = context.payload.issue.node_id;

              core.info(`✅ projectId=${projectId}`);
              core.info(`✅ fieldId=${fieldId}`);
              core.info(`✅ optionId=${optionId}`);

              // 1️⃣ 把 Issue 添加到 Project
              const addMutation = `
              mutation {
                addProjectV2ItemById(input: {
                  projectId: "${projectId}",
                  contentId: "${issueNodeId}"
                }) {
                  item { id }
                }
              }`;

              const addResult = await github.graphql(addMutation);
              const itemId = addResult.addProjectV2ItemById.item.id;
              core.info(`✅ 已添加到项目 itemId=${itemId}`);

              // 2️⃣ 更新状态字段为“🌱 新芽”
              const updateMutation = `
              mutation {
                updateProjectV2ItemFieldValue(input: {
                  projectId: "${projectId}",
                  itemId: "${itemId}",
                  fieldId: "${fieldId}",
                  value: { singleSelectOptionId: "${optionId}" }
                }) {
                  projectV2Item { id }
                }
              }`;

              // 3️⃣ 添加标签
              await github.rest.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ["🌱-seed"]
              });
              core.info("✅ 已添加标签 🌱-seed");

              await github.graphql(updateMutation);
              core.info("✅ 已更新状态字段为 🌱 新芽");

              // 4️⃣ 更新 Issue 模板正文
              const template = [
                "## 🎯 EQT研究流程",
                "",
                "**当前阶段**: 🌱 新芽",
                "**优先级**: [请选择]",
                "**领域**: [请选择]",
                "**AI需求**:",
                "**预测**:",
                "**专家**:",
                "",
                "---",
                "*由 EQT Pipeline 自动创建*"
              ].join("\n");

              const originalBody = context.payload.issue.body || "";
              await github.rest.issues.update({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `${template}\n\n${originalBody}`
              });
              core.info("✅ Issue 模板已更新");

              // 打印结果
              core.info(`✅ Add Result: ${JSON.stringify(addResult)}`);

            } catch (error) {
              core.setFailed(`❌ 出错啦: ${error.message}`);
              if (error.errors) {
                core.error(JSON.stringify(error.errors, null, 2));
              }
            }
