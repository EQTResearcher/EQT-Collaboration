name: EQT Kanban Advanced Automation (Final Runnable Version)

on:
  workflow_dispatch:
    inputs:
      contentType:
        description: 'Content Type'
        required: true
        default: 'Issue'
        type: choice
        options:
        - Issue
        - PullRequest
      contentNumber:
        description: 'Content Number'
        required: true
        type: number
      triggerAI:
        description: 'Trigger AI Bot'
        required: false
        type: boolean
        default: false
  issues:
    types: [opened, labeled, unlabeled, closed, reopened, edited]
  pull_request:
    types: [opened, closed, reopened, ready_for_review, edited, labeled, unlabeled]
  project_card:
    types: [created, moved, deleted]

jobs:
  sync-status-full:
    runs-on: ubuntu-latest
    steps:
      - name: Sync labels to status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const manualInput = context.payload.inputs;
            let issue = context.payload.issue;
            let pr = context.payload.pull_request;
            let contentType, contentNumber, isIssueClosed;

            if (context.eventName === 'workflow_dispatch' && manualInput?.contentType && manualInput?.contentNumber) {
              contentType = manualInput.contentType;
              contentNumber = parseInt(manualInput.contentNumber);
              isIssueClosed = false;
              console.log(`📥 手动触发：处理 ${contentType} #${contentNumber}`);
            } else {
              contentType = issue ? 'Issue' : 'PullRequest';
              contentNumber = issue?.number || pr?.number;
              isIssueClosed = issue?.state === 'closed';
              if (!contentNumber) {
                console.log('❌ 未找到有效 Issue 或 PR，终止流程');
                return;
              }
              console.log(`📥 自动触发：处理 ${contentType} #${contentNumber}`);
            }

            try {
              // ✅ 修正GraphQL语法：使用完整的字段名
              const projectQuery = `query {
                repository(owner: "EQTResearcher", name: "EQT-Collaboration") {
                  projectV2(number: 10) {
                    id
                    title
                    fields(first: 30) {
                      nodes {
                        ... on ProjectV2SingleSelectFieldConfiguration {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                        ... on ProjectV2NumberFieldConfiguration {
                          id
                          name
                        }
                        ... on ProjectV2FieldCommon {
                          id
                          name
                          dataType
                        }
                      }
                    }
                    items(first: 100) {
                      nodes {
                        id
                        fieldValues(first: 10) {
                          nodes {
                            ... on ProjectV2ItemFieldSingleSelectValue {
                              field {
                                id
                                name
                              }
                              optionId
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }`;
              
              console.log('🔍 查询项目信息...');
              const { repository } = await github.graphql(projectQuery);
              const projectV2 = repository.projectV2;
              
              if (!projectV2) {
                console.log('❌ 未找到项目（检查仓库：EQTResearcher/EQT-Collaboration，项目编号：10）');
                console.log('请确认：1.项目已迁移到新系统 2.项目编号正确 3.有访问权限');
                return;
              }
              console.log(`✅ 找到项目：${projectV2.title} (ID: ${projectV2.id})`);

              // 查找状态字段
              const statusField = projectV2.fields.nodes.find(field => 
                field.name.toLowerCase().includes('status') || 
                field.name.toLowerCase().includes('状态') ||
                field.name.toLowerCase().includes('阶段')
              );
              
              if (!statusField || !statusField.options) {
                console.log('❌ 未找到状态单选字段');
                console.log('可用字段：');
                projectV2.fields.nodes.forEach(f => {
                  console.log(`  - ${f.name} (${f.__typename || '未知'})`);
                  if (f.options) {
                    console.log(`    选项：${f.options.map(o => o.name).join(', ')}`);
                  }
                });
                return;
              }
              console.log(`✅ 找到状态字段：${statusField.name}`);
              console.log(`状态选项：${statusField.options.map(o => o.name).join(', ')}`);

              // 阶段配置
              const stageConfig = {
                seed: { 
                  name: '🌱 新芽 (Seed)',
                  trigger: () => {
                    if (context.eventName === 'workflow_dispatch') return true;
                    const isNewIssue = context.eventName === 'issues' && context.payload.action === 'opened';
                    const hasNoMatchLabel = !Object.keys(stageConfig).some(key => 
                      key !== 'seed' && (issue?.labels || []).some(l => l.name.toLowerCase().includes(key))
                    );
                    return contentType === 'Issue' && !isIssueClosed && (isNewIssue || hasNoMatchLabel);
                  }
                },
                exploring: { 
                  name: '🔍 论证中 (Exploring)',
                  trigger: () => (issue?.labels || pr?.labels || []).some(l => l.name.toLowerCase().includes('exploring'))
                },
                validating: { 
                  name: '🧪 验证中 (Validating)',
                  trigger: () => {
                    const linksEqtData = pr?.body?.includes('EQT-Data') || pr?.head?.repo?.name === 'EQT-Data';
                    const hasValidatingLabel = (issue?.labels || pr?.labels || []).some(l => l.name.toLowerCase().includes('validating'));
                    return linksEqtData || hasValidatingLabel;
                  }
                },
                reviewing: { 
                  name: '🤝 社区评审 (Reviewing)',
                  trigger: () => (issue?.labels || pr?.labels || []).some(l => l.name.toLowerCase().includes('reviewing'))
                },
                consensus: { 
                  name: '✅ 初步共识 (Consensus)',
                  trigger: () => (issue?.labels || pr?.labels || []).some(l => l.name.toLowerCase().includes('consensus'))
                },
                integration: { 
                  name: '🎯 核心整合 (Integration)',
                  trigger: () => pr?.state === 'closed' && pr?.merged === true
                },
                archived: { 
                  name: '📋 已归档 (Archived)',
                  trigger: () => isIssueClosed
                }
              };

              // 查找匹配阶段
              let targetStage = null;
              for (const [key, stage] of Object.entries(stageConfig)) {
                if (stage.trigger()) {
                  targetStage = stage;
                  console.log(`🔄 匹配阶段：${key} -> ${targetStage.name}`);
                  break;
                }
              }
              
              if (!targetStage) {
                console.log('ℹ️ 未找到匹配阶段，保持当前状态');
                return;
              }

              // 确保目标选项存在
              const targetOption = statusField.options.find(opt => opt.name === targetStage.name);
              if (!targetOption) {
                console.log(`❌ 项目中无状态选项「${targetStage.name}」`);
                console.log('可用选项：', statusField.options.map(o => o.name));
                return;
              }

              // 查询项目项
              const contentId = `${contentType}:EQTResearcher/EQT-Collaboration#${contentNumber}`;
              console.log(`🔍 查询项目项：${contentId}`);
              
              const itemQuery = `query($projectId: ID!, $contentId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    items(first: 1, contentId: $contentId) {
                      nodes {
                        id
                      }
                    }
                  }
                }
              }`;
              
              const { node } = await github.graphql(itemQuery, {
                projectId: projectV2.id,
                contentId: contentId
              });
              
              const projectItem = node.items?.nodes[0];
              if (!projectItem) {
                console.log(`❌ 未找到 ${contentType}#${contentNumber} 的项目项`);
                console.log('请手动将 Issue/PR 添加到项目中，或检查 contentId 格式');
                return;
              }
              console.log(`✅ 找到项目项：${projectItem.id}`);

              // 更新状态
              const updateMutation = `mutation updateProjectStatus($projectId: ID!, $itemId: ID!, $fieldId: ID!, $valueId: ID!) {
                updateProjectV2SingleSelectField(
                  projectId: $projectId
                  itemId: $itemId
                  fieldId: $fieldId
                  valueId: $valueId
                ) {
                  projectV2Field {
                    ... on ProjectV2SingleSelectField {
                      name
                    }
                  }
                }
              }`;
              
              const updateResult = await github.graphql(updateMutation, {
                projectId: projectV2.id,
                itemId: projectItem.id,
                fieldId: statusField.id,
                valueId: targetOption.id
              });

              console.log(`🎉 状态更新成功：${targetStage.name}`);
              console.log(`项目项 ID：${projectItem.id}`);

            } catch (error) {
              console.error('❌ 执行失败：', error.message);
              if (error.errors) {
                error.errors.forEach(err => {
                  console.error(`GraphQL错误：${err.message}`);
                });
              }
              throw error;
            }
