name: EQT Kanban Advanced Automation (Final Runnable Version)

on:
  workflow_dispatch:
  issues:
    types: [opened, labeled, unlabeled, closed, reopened, edited]
  pull_request:
    types: [opened, closed, reopened, ready_for_review, edited, labeled, unlabeled]
  project_card:
    types: [created, moved, deleted]

jobs:
  sync-status-full:
    runs-on: ubuntu-latest
    steps:
      - name: Sync labels to status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const manualInput = context.payload.inputs;
            let issue = context.payload.issue;
            let pr = context.payload.pull_request;
            let contentType, contentNumber, isIssueClosed;

            if (context.eventName === 'workflow_dispatch' && manualInput.contentType && manualInput.contentNumber) {
              contentType = manualInput.contentType;
              contentNumber = parseInt(manualInput.contentNumber);
              isIssueClosed = false;
              console.log(`📥 手动触发：处理${contentType} #${contentNumber}`);
            } else {
              contentType = issue ? 'Issue' : 'PullRequest';
              contentNumber = issue?.number || pr?.number;
              isIssueClosed = issue?.state === 'closed';
              if (!contentNumber) {
                console.log('❌ 未找到有效Issue或PR，终止流程');
                return;
              }
              console.log(`📥 自动触发：处理${contentType} #${contentNumber}`);
            }

            try {
              # 已填入你的仓库信息和项目编号10，无格式错误
              const projectQuery = `query {
  repository(owner: "EQTResearcher", name: "EQT-Collaboration") {
    projectV2(number: 10) {
      id
      title
      fields(first: 30) {
        nodes {
          ... on ProjectV2SingleSelectFieldConfiguration {
            id
            name
            options { id, name }
          }
          ... on ProjectV2NumberFieldConfiguration {
            id
            name
          }
        }
      }
      items(first: 100) {
        nodes {
          id
          fieldValues(first: 10) {
            nodes {
              ... on ProjectV2ItemFieldSingleSelectValue {
                field { id, name }
                optionId
              }
            }
          }
        }
      }
    }
  }
}`;
              
              const { repository } = await github.graphql(projectQuery);
              const projectV2 = repository.projectV2;
              
              if (!projectV2) {
                console.log('❌ 未找到项目（检查仓库信息：EQTResearcher/EQT-Collaboration，项目编号：10）');
                return;
              }
              console.log(`✅ 找到项目：${projectV2.title}`);

              const statusField = projectV2.fields.nodes.find(field => 
                field.name.toLowerCase().includes('status') || field.name.includes('状态')
              );
              
              if (!statusField) {
                console.log('❌ 未找到「状态」字段，请在项目中创建含Status/状态的单选字段');
                return;
              }
              console.log(`✅ 找到状态字段：${statusField.name}`);

              const stageConfig = {
                seed: { 
                  name: '🌱 新芽 (Seed)',
                  trigger: () => {
                    if (context.eventName === 'workflow_dispatch') return true;
                    const isNewIssue = context.eventName === 'issues' && context.payload.action === 'opened';
                    const hasNoMatchLabel = !Object.keys(stageConfig).some(key => 
                      key !== 'seed' && (issue?.labels || []).some(l => l.name.toLowerCase().includes(key))
                    );
                    return contentType === 'Issue' && !isIssueClosed && (isNewIssue || hasNoMatchLabel);
                  }
                },
                exploring: { 
                  name: '🔍 论证中 (Exploring)',
                  trigger: () => (issue?.labels || pr?.labels || []).some(l => l.name.toLowerCase().includes('exploring'))
                },
                validating: { 
                  name: '🧪 验证中 (Validating)',
                  trigger: () => {
                    const linksEqtData = pr?.body?.includes('EQT-Data') || pr?.head?.repo?.name === 'EQT-Data';
                    const hasValidatingLabel = (issue?.labels || pr?.labels || []).some(l => l.name.toLowerCase().includes('validating'));
                    return linksEqtData || hasValidatingLabel;
                  }
                },
                reviewing: { 
                  name: '🤝 社区评审 (Reviewing)',
                  trigger: () => (issue?.labels || pr?.labels || []).some(l => l.name.toLowerCase().includes('reviewing'))
                },
                consensus: { 
                  name: '✅ 初步共识 (Consensus)',
                  trigger: () => (issue?.labels || pr?.labels || []).some(l => l.name.toLowerCase().includes('consensus'))
                },
                integration: { 
                  name: '🎯 核心整合 (Integration)',
                  trigger: () => pr?.state === 'closed' && pr?.merged === true
                },
                archived: { 
                  name: '📋 已归档 (Archived)',
                  trigger: () => isIssueClosed
                }
              };

              let targetStage = null;
              Object.values(stageConfig).forEach(stage => {
                if (!targetStage && stage.trigger()) targetStage = stage;
              });
              
              if (!targetStage) {
                console.log('ℹ️ 未找到匹配阶段，保持当前状态');
                return;
              }
              console.log(`🔄 匹配阶段：${targetStage.name}`);

              const targetOption = statusField.options.find(opt => opt.name === targetStage.name);
              if (!targetOption) {
                console.log(`❌ 项目中无「${targetStage.name}」状态选项，可用选项：${statusField.options.map(o => o.name).join(', ')}`);
                return;
              }

              # 已同步你的仓库信息
              const contentId = `${contentType}:EQTResearcher/EQT-Collaboration#${contentNumber}`;
              const itemQuery = `query($projectId: ID!, $contentId: ID!) {
  node(id: $projectId) {
    ... on ProjectV2 {
      items(first: 1, contentId: $contentId) {
        nodes { id }
      }
    }
  }
}`;
              
              const { node } = await github.graphql(itemQuery, {
                projectId: projectV2.id,
                contentId: contentId
              });
              
              const projectItem = node.items.nodes[0];
              if (!projectItem) {
                console.log(`ℹ️ 未找到${contentType}#${contentNumber}的项目项，请手动添加到「EQT Collective Intelligence Pipeline」看板`);
                return;
              }
              console.log(`✅ 找到项目项：${projectItem.id}`);

              const updateMutation = `mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $valueId: ID!) {
  updateProjectV2SingleSelectField(
    projectId: $projectId
    itemId: $itemId
    fieldId: $fieldId
    valueId: $valueId
  ) {
    projectV2Item { id }
  }
}`;
              
              await github.graphql(updateMutation, {
                projectId: projectV2.id,
                itemId: projectItem.id,
                fieldId: statusField.id,
                valueId: targetOption.id
              });

              console.log(`🎉 状态更新完成：${targetStage.name}`);

            } catch (error) {
              console.error('❌ 流程失败：', error.message);
              throw error;
            }
