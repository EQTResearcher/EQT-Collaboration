name: EQT Kanban Advanced Automation

on:
  issues:
    types: [opened, labeled, unlabeled, closed, reopened]
  pull_request:
    types: [opened, closed, reopened, ready_for_review]
  project_card:
    types: [created, moved, deleted]

jobs:
  sync-status:
    runs-on: ubuntu-latest
    steps:
      - name: Sync labels to status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { issue, pull_request: pr } = context.payload;
            const contentType = issue ? 'Issue' : 'PullRequest';
            const contentNumber = issue?.number || pr?.number;
            
            if (!contentNumber) {
              console.log('没有找到 issue 或 PR');
              return;
            }

            console.log(`处理 ${contentType} #${contentNumber}`);

            try {
              // 步骤1: 获取项目ID
              const projectQuery = `
                query {
                  repository(owner: "${context.repo.owner}", name: "${context.repo.repo}") {
                    projectV2(number: 1) {  # 或者使用 name: "项目名称"
                      id
                      title
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const { repository } = await github.graphql(projectQuery);
              const projectV2 = repository.projectV2;
              
              if (!projectV2) {
                console.log('未找到项目 "EQT Collective Intelligence Pipeline"');
                return;
              }
              
              console.log(`找到项目: ${projectV2.title} (ID: ${projectV2.id})`);

              // 步骤2: 查找 Status 字段和对应的选项
              const statusField = projectV2.fields.nodes.find(field => 
                field.name.toLowerCase().includes('status') || 
                field.name.includes('状态')
              );
              
              if (!statusField) {
                console.log('未找到 Status 字段');
                return;
              }
              
              console.log(`找到状态字段: ${statusField.name} (ID: ${statusField.id})`);

              // 标签到状态的映射（确保与项目中的选项名称完全匹配）
              const labelToStatus = {
                'exploring': '🔍 论证中 (Exploring)',
                'reviewing': '🤝 社区评审 (Reviewing)', 
                'consensus': '✅ 初步共识 (Consensus)',
                'integration': '🎯 核心整合 (Integration)'
              };

              // 查找匹配的标签
              let targetStatusName = null;
              const labels = issue?.labels || pr?.labels || [];
              
              for (const [labelKey, statusName] of Object.entries(labelToStatus)) {
                if (labels.some(l => 
                  l.name.toLowerCase().includes(labelKey)
                )) {
                  targetStatusName = statusName;
                  console.log(`找到匹配标签: ${labelKey} -> ${statusName}`);
                  break;
                }
              }
              
              if (!targetStatusName) {
                console.log('没有找到匹配的状态标签');
                return;
              }

              // 查找目标状态选项
              const targetOption = statusField.options.find(opt => 
                opt.name === targetStatusName
              );
              
              if (!targetOption) {
                console.log(`未找到状态选项: ${targetStatusName}`);
                console.log('可用选项:', statusField.options.map(o => o.name));
                return;
              }

              // 步骤3: 获取项目项ID
              const contentId = `${contentType}:${context.repo.owner}/${context.repo.repo}#${contentNumber}`;
              console.log(`Content ID: ${contentId}`);
              
              const itemQuery = `
                query($projectId: ID!, $contentId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      items(first: 10, contentId: $contentId) {
                        nodes {
                          id
                          content {
                            ... on Issue {
                              number
                              title
                            }
                            ... on PullRequest {
                              number
                              title
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const { node } = await github.graphql(itemQuery, {
                projectId: projectV2.id,
                contentId: contentId
              });
              
              const projectItem = node.items.nodes[0];
              if (!projectItem) {
                console.log(`未找到项目项 for ${contentId}`);
                return;
              }
              
              console.log(`找到项目项: ${projectItem.id}`);

              // 步骤4: 更新状态
              const updateMutation = `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $valueId: ID!) {
                  updateProjectV2SingleSelectField(
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    valueId: $valueId
                  ) {
                    projectV2Field {
                      ... on ProjectV2SingleSelectField {
                        name
                      }
                    }
                  }
                }
              `;
              
              const { updateProjectV2SingleSelectField } = await github.graphql(updateMutation, {
                projectId: projectV2.id,
                itemId: projectItem.id,
                fieldId: statusField.id,
                valueId: targetOption.id
              });
              
              console.log(`✅ 成功更新状态为: ${targetStatusName}`);
              console.log(`项目项 ID: ${projectItem.id}`);

            } catch (error) {
              console.error('❌ 更新失败:', error.message);
              if (error.errors) {
                console.error('GraphQL 错误:', JSON.stringify(error.errors, null, 2));
              }
              throw error;
            }

  ai-bot-trigger:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, '🌱 seed')
    steps:
      - name: Trigger AI Bot analysis
        run: |
          echo "🌱 新种子议题 #${{ github.event.issue.number }} 需要AI分析"
          echo "议题标题: ${{ github.event.issue.title }}"
          # 这里可以调用你的AI bot API
          # curl -X POST https://your-ai-bot.com/analyze \
          #   -H "Authorization: Bearer $AI_BOT_TOKEN" \
          #   -d '{"issue": ${{ toJson(github.event.issue) }}}'
