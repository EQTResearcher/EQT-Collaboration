name: EQT Kanban Advanced Automation (100% Triggerable Version)

on:
  workflow_dispatch:
  issues:
    types: [opened, labeled, unlabeled, closed, reopened, edited]
  pull_request:
    types: [opened, closed, reopened, ready_for_review, edited, labeled, unlabeled]
  project_card:
    types: [created, moved, deleted]

jobs:
  sync-status-full:
    runs-on: ubuntu-latest
    steps:
      - name: Sync labels to status (Full Stage Coverage)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            # 手动触发逻辑
            const manualInput = context.payload.inputs;
            let issue = context.payload.issue;
            let pr = context.payload.pull_request;
            let contentType, contentNumber, isIssueClosed;

            if (context.eventName === 'workflow_dispatch' && manualInput.contentType && manualInput.contentNumber) {
              contentType = manualInput.contentType;
              contentNumber = parseInt(manualInput.contentNumber);
              isIssueClosed = false;
              console.log(`📥 手动触发：处理${contentType} #${contentNumber}`);
            } else {
              contentType = issue ? 'Issue' : 'PullRequest';
              contentNumber = issue?.number || pr?.number;
              isIssueClosed = issue?.state === 'closed';
              if (!contentNumber) {
                console.log('❌ 未找到有效Issue或PR，终止流程');
                return;
              }
              console.log(`📥 自动触发：处理${contentType} #${contentNumber}（状态：${isIssueClosed ? '已关闭' : '活跃'}）`);
            }

            try {
              # Line 49核心修复：GraphQL字符串与script代码缩进严格对齐
              const projectQuery = `
query {
  repository(owner: "${context.repo.owner}", name: "${context.repo.repo}") {
    projectV2(number: 1) { # 【必改】替换1为你的项目编号
      id
      title
      fields(first: 30) {
        nodes {
          ... on ProjectV2SingleSelectFieldConfiguration {
            id
            name
            options { id, name }
          }
          ... on ProjectV2NumberFieldConfiguration {
            id
            name
          }
        }
      }
      items(first: 100) {
        nodes {
          id
          fieldValues(first: 10) {
            nodes {
              ... on ProjectV2ItemFieldSingleSelectValue {
                field { id, name }
                optionId
              }
            }
          }
        }
      }
    }
  }
}
              `;
              
              const { repository } = await github.graphql(projectQuery);
              const projectV2 = repository.projectV2;
              
              if (!projectV2) {
                console.log('❌ 未找到项目「EQT Collective Intelligence Pipeline」');
                return;
              }
              console.log(`✅ 找到项目：${projectV2.title}（ID：${projectV2.id}）`);

              # 提取核心字段
              const statusField = projectV2.fields.nodes.find(field => 
                field.name.toLowerCase().includes('status') || field.name.includes('状态')
              );
              const wipLimitField = projectV2.fields.nodes.find(field => 
                field.name.toLowerCase().includes('wip limit') || field.name.includes('wip限制')
              );
              
              if (!statusField) {
                console.log('❌ 未找到「状态」字段，请创建含Status/状态的单选字段');
                return;
              }
              console.log(`✅ 找到状态字段：${statusField.name}（ID：${statusField.id}）`);

              # 全阶段状态映射
              const stageConfig = {
                seed: { 
                  name: '🌱 新芽 (Seed)',
                  trigger: () => {
                    if (context.eventName === 'workflow_dispatch') return true;
                    const isNewIssue = context.eventName === 'issues' && context.payload.action === 'opened';
                    const hasNoMatchLabel = !Object.keys(stageConfig).some(key => 
                      key !== 'seed' && (issue?.labels || []).some(l => l.name.toLowerCase().includes(key))
                    );
                    return contentType === 'Issue' && !isIssueClosed && (isNewIssue || hasNoMatchLabel);
                  }
                },
                exploring: { 
                  name: '🔍 论证中 (Exploring)',
                  trigger: () => (issue?.labels || pr?.labels || []).some(l => l.name.toLowerCase().includes('exploring'))
                },
                validating: { 
                  name: '🧪 验证中 (Validating)',
                  trigger: () => {
                    const linksEqtData = pr?.body?.includes('EQT-Data') || pr?.head?.repo?.name === 'EQT-Data';
                    const hasValidatingLabel = (issue?.labels || pr?.labels || []).some(l => l.name.toLowerCase().includes('validating'));
                    return linksEqtData || hasValidatingLabel;
                  }
                },
                reviewing: { 
                  name: '🤝 社区评审 (Reviewing)',
                  trigger: () => (issue?.labels || pr?.labels || []).some(l => l.name.toLowerCase().includes('reviewing'))
                },
                consensus: { 
                  name: '✅ 初步共识 (Consensus)',
                  trigger: () => (issue?.labels || pr?.labels || []).some(l => l.name.toLowerCase().includes('consensus'))
                },
                integration: { 
                  name: '🎯 核心整合 (Integration)',
                  trigger: () => pr?.state === 'closed' && pr?.merged === true
                },
                archived: { 
                  name: '📋 已归档 (Archived)',
                  trigger: () => isIssueClosed
                }
              };

              # 匹配目标阶段
              let targetStage = null;
              Object.values(stageConfig).forEach(stage => {
                if (!targetStage && stage.trigger()) targetStage = stage;
              });
              
              if (!targetStage) {
                console.log('ℹ️ 未找到匹配阶段，保持当前状态');
                return;
              }
              console.log(`🔄 匹配目标阶段：${targetStage.name}`);

              # 验证阶段存在性
              const targetOption = statusField.options.find(opt => opt.name === targetStage.name);
              if (!targetOption) {
                console.log(`❌ 无「${targetStage.name}」状态选项，可用选项：${statusField.options.map(o => o.name).join(', ')}`);
                return;
              }

              # 处理内容ID
              let contentId = `${contentType}:${context.repo.owner}/${context.repo.repo}#${contentNumber}`;

              # 项目项查询
              const itemQuery = `
query($projectId: ID!, $contentId: ID!) {
  node(id: $projectId) {
    ... on ProjectV2 {
      items(first: 1, contentId: $contentId) {
        nodes { id }
      }
    }
  }
}
              `;
              
              const { node } = await github.graphql(itemQuery, {
                projectId: projectV2.id,
                contentId: contentId
              });
              
              const projectItem = node.items.nodes[0];
              if (!projectItem) {
                console.log(`ℹ️ 未找到${contentType}#${contentNumber}的项目项，需手动添加到看板`);
                return;
              }
              console.log(`✅ 找到项目项：${projectItem.id}`);

              # 执行状态更新
              const updateMutation = `
mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $valueId: ID!) {
  updateProjectV2SingleSelectField(
    projectId: $projectId
    itemId: $itemId
    fieldId: $fieldId
    valueId: $valueId
  ) {
    projectV2Item { id }
  }
}
              `;
              
              await github.graphql(updateMutation, {
                projectId: projectV2.id,
                itemId: projectItem.id,
                fieldId: statusField.id,
                valueId: targetOption.id
              });

              # 结果输出
              console.log(`🎉 状态更新完成！- 项目项：${projectItem.id} - 阶段：${targetStage.name}`);

            } catch (error) {
              console.error('❌ 流程失败：', error.message);
              if (error.errors) console.error('📝 GraphQL错误：', JSON.stringify(error.errors, null, 2));
              throw error;
            }

  ai-bot-trigger:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, '🌱 seed') || (github.eventName === 'workflow_dispatch' && github.event.inputs.triggerAI === 'true')
    steps:
      - name: Trigger EQT AI Bot Analysis
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const manualInput = context.payload.inputs;
            let issueNumber = manualInput.contentNumber || context.payload.issue?.number;
            let issueTitle = manualInput.issueTitle || context.payload.issue?.title;
            
            if (!issueNumber) {
              console.log('❌ 未找到Issue编号，无法触发AI');
              return;
            }
            console.log(`🤖 触发AI分析：#${issueNumber}《${issueTitle}》`);

            try {
              const aiRequestData = {
                issueNumber: issueNumber,
                title: issueTitle,
                createdAt: new Date().toISOString()
              };

              const aiBotToken = process.env.AI_BOT_TOKEN;
              if (!aiBotToken) {
                console.log('⚠️ 未配置AI_BOT_TOKEN，跳过调用');
                return;
              }

              const response = await fetch('https://your-eqt-ai-bot.com/analyze-seed', {
                method: 'POST',
                headers: {
                  'Authorization': `Bearer ${aiBotToken}`,
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify(aiRequestData)
              });

              if (response.ok) {
                console.log(`✅ AI请求成功`);
              } else {
                console.error(`❌ AI调用失败：${response.statusText}`);
              }
            } catch (aiError) {
              console.error('❌ AI触发异常：', aiError.message);
            }
