name: EQT Kanban Advanced Automation

on:
  issues:
    types: [opened, labeled, unlabeled, closed, reopened]
  pull_request:
    types: [opened, closed, reopened, ready_for_review]
  project_card:
    types: [created, moved, deleted]

jobs:
  sync-status:
    runs-on: ubuntu-latest
    steps:
      - name: Sync labels to status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { issue, pull_request: pr } = context.payload;
            const contentType = issue ? 'Issue' : 'PullRequest';
            const contentNumber = issue?.number || pr?.number;
            
            if (!contentNumber) {
              console.log('❌ 没有找到 Issue 或 PR');
              return;
            }

            console.log(`ℹ️ 处理 ${contentType} #${contentNumber}`);

            try {
              // 步骤1: 查询组织/仓库的所有项目，找到目标项目
              const projectSearchQuery = `
                query {
                  organization(login: "${context.repo.owner}") {
                    projectV2s(first: 20) {
                      nodes {
                        id
                        title
                        number
                        url
                      }
                    }
                  }
                  repository(owner: "${context.repo.owner}", name: "${context.repo.repo}") {
                    projectV2s(first: 20) {
                      nodes {
                        id
                        title
                        number
                        url
                      }
                    }
                  }
                }
              `;
              
              const { organization, repository } = await github.graphql(projectSearchQuery);
              
              // 合并所有项目并查找目标项目（模糊匹配）
              const allProjects = [
                ...(organization?.projectV2s?.nodes || []),
                ...(repository?.projectV2s?.nodes || [])
              ];
              
              const targetProject = allProjects.find(project => 
                project.title.toLowerCase().includes("eqt collective intelligence pipeline")
              );
              
              if (!targetProject) {
                console.log('❌ 未找到项目 "EQT Collective Intelligence Pipeline"');
                console.log('可用项目:');
                allProjects.forEach(p => {
                  console.log(`  - ${p.title} (ID: ${p.id}, Number: ${p.number}, URL: ${p.url})`);
                });
                return;
              }
              
              console.log(`✅ 找到项目: ${targetProject.title} (ID: ${targetProject.id}, Number: ${targetProject.number})`);

              // 步骤2: 获取项目字段（特别是 Status 字段）
              const fieldsQuery = `
                query($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                          ... on ProjectV2FieldCommon {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const { node: projectNode } = await github.graphql(fieldsQuery, {
                projectId: targetProject.id
              });
              
              const fields = projectNode.fields.nodes;
              const statusField = fields.find(field => 
                field.name.toLowerCase().includes('status') || 
                field.name.includes('状态') ||
                field.name.includes('阶段')
              );
              
              if (!statusField || !statusField.options) {
                console.log('❌ 未找到 Status 单选字段');
                console.log('可用字段:');
                fields.forEach(f => {
                  console.log(`  - ${f.name} (${f.__typename})`);
                  if (f.options) {
                    console.log(`    选项: ${f.options.map(o => o.name).join(', ')}`);
                  }
                });
                return;
              }
              
              console.log(`✅ 找到状态字段: ${statusField.name} (ID: ${statusField.id})`);
              console.log(`状态选项: ${statusField.options.map(o => o.name).join(', ')}`);

              // 标签到状态的映射（确保与项目选项完全匹配）
              const labelToStatus = {
                'exploring': '🔍 论证中 (Exploring)',
                'reviewing': '🤝 社区评审 (Reviewing)', 
                'consensus': '✅ 初步共识 (Consensus)',
                'integration': '🎯 核心整合 (Integration)'
              };

              // 获取当前标签
              const labels = issue?.labels || pr?.labels || [];
              console.log(`ℹ️ 当前标签: ${labels.map(l => l.name).join(', ') || '无标签'}`);

              // 查找匹配的标签
              let targetStatusName = null;
              for (const [labelKey, statusName] of Object.entries(labelToStatus)) {
                if (labels.some(l => l.name.toLowerCase().includes(labelKey))) {
                  targetStatusName = statusName;
                  console.log(`✅ 匹配标签: ${labelKey} -> ${statusName}`);
                  break;
                }
              }
              
              if (!targetStatusName) {
                console.log('⚠️ 没有找到匹配的状态标签，跳过更新');
                return;
              }

              // 查找目标状态选项
              const targetOption = statusField.options.find(opt => 
                opt.name === targetStatusName
              );
              
              if (!targetOption) {
                console.log(`❌ 未找到状态选项: ${targetStatusName}`);
                console.log('可用选项:', statusField.options.map(o => o.name));
                return;
              }
              
              console.log(`✅ 找到目标选项: ${targetOption.name} (ID: ${targetOption.id})`);

              // 步骤3: 检查项目项是否存在，若不存在则添加
              const contentId = `${contentType}:${context.repo.owner}/${context.repo.repo}#${contentNumber}`;
              console.log(`ℹ️ Content ID: ${contentId}`);
              
              const itemQuery = `
                query($projectId: ID!, $contentId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      items(first: 10, contentId: $contentId) {
                        nodes {
                          id
                          content {
                            ... on Issue {
                              number
                              title
                            }
                            ... on PullRequest {
                              number
                              title
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const { node: itemNode } = await github.graphql(itemQuery, {
                projectId: targetProject.id,
                contentId: contentId
              });
              
              let projectItem = itemNode.items.nodes[0];
              
              // 如果项目项不存在，自动添加
              if (!projectItem) {
                console.log(`⚠️ 未找到项目项 for ${contentId}，尝试添加...`);
                
                const addItemMutation = `
                  mutation($projectId: ID!, $contentId: ID!) {
                    addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) {
                      item {
                        id
                        content {
                          ... on Issue {
                            number
                            title
                          }
                          ... on PullRequest {
                            number
                            title
                          }
                        }
                      }
                    }
                  }
                `;
                
                const addResult = await github.graphql(addItemMutation, {
                  projectId: targetProject.id,
                  contentId: contentId
                });
                
                projectItem = addResult.addProjectV2ItemById.item;
                console.log(`✅ 成功添加项目项: ${projectItem.id}`);
              } else {
                console.log(`✅ 找到项目项: ${projectItem.id} (${projectItem.content.title})`);
              }

              // 步骤4: 更新状态
              const updateMutation = `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $valueId: ID!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: { singleSelectOptionId: $valueId }
                  }) {
                    projectV2Item {
                      id
                      fieldValues(first: 10) {
                        nodes {
                          ... on ProjectV2ItemFieldSingleSelectValue {
                            name
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const { updateProjectV2ItemFieldValue } = await github.graphql(updateMutation, {
                projectId: targetProject.id,
                itemId: projectItem.id,
                fieldId: statusField.id,
                valueId: targetOption.id
              });
              
              console.log(`🎉 成功更新状态为: ${targetStatusName}`);
              console.log(`项目项 ID: ${projectItem.id}`);

            } catch (error) {
              console.error('❌ 执行失败:', error.message);
              if (error.errors) {
                error.errors.forEach(err => {
                  console.error(`GraphQL 错误: ${err.message}`);
                  if (err.path) console.error(`路径: ${err.path.join('.')}`);
                });
              }
              console.error('完整错误:', JSON.stringify(error, null, 2));
              throw error;
            }

  ai-bot-trigger:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, '🌱 seed')
    steps:
      - name: Trigger AI Bot analysis
        run: |
          echo "🌱 新种子议题 #${{ github.event.issue.number }} 需要AI分析"
          echo "议题标题: ${{ github.event.issue.title }}"
          # 替换为你的 AI Bot API 调用
          # curl -X POST https://your-ai-bot.com/analyze \
          #   -H "Authorization: Bearer $AI_BOT_TOKEN" \
          #   -d '{"issue": ${{ toJson(github.event.issue) }}}'
