name: EQT Kanban Advanced Automation

on:
  issues:
    types: [opened, labeled, unlabeled, closed, reopened]
  pull_request:
    types: [opened, closed, reopened, ready_for_review]
  project_card:
    types: [created, moved, deleted]  # 注意：新项目使用 project_v2 中的事件，但这里暂保留；如需调整，可改为 project_v2

jobs:
  sync-status:
    runs-on: ubuntu-latest
    steps:
      - name: Sync labels to status
        uses: actions/github-script@v7  # 更新到最新版本，支持 GraphQL
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}  # 确保 token 有 projects:write 权限
          script: |
            const { issue } = context.payload;
            if (!issue) return;  // 只处理 issue 事件

            // GraphQL 查询：获取项目、字段和项
            const query = `
              query GetProjectAndItem($owner: String!, $repo: String!, $issueNumber: Int!) {
                repository(owner: $owner, name: $repo) {
                  projectV2(number: 1) {  # 假设项目是仓库的第一个项目；否则用名称查询
                    id
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                    items(first: 20) {
                      nodes {
                        id
                        fieldValues(first: 10) {
                          nodes {
                            ... on ProjectV2ItemFieldSingleSelectValue {
                              optionId
                            }
                          }
                        }
                        content {
                          ... on Issue {
                            number
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;

            const variables = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              issueNumber: issue.number
            };

            const { repository } = await github.rest.graphql(query, variables);
            const project = repository.projectV2;
            if (!project) {
              core.warning('未找到新项目 (V2)。请确认项目已迁移并指定正确编号。');
              return;
            }

            // 标签到状态选项的映射（假设 Status 字段选项名称匹配）
            const labelToStatusOption = {
              'exploring': '🔍 论证中 (Exploring)',
              'reviewing': '🤝 社区评审 (Reviewing)', 
              'consensus': '✅ 初步共识 (Consensus)',
              'integration': '🎯 核心整合 (Integration)'
            };

            // 查找 Status 字段
            const statusField = project.fields.nodes.find(f => f.name === 'Status');
            if (!statusField) {
              core.warning('未找到 Status 字段。请在新项目中创建单选字段 "Status" 并添加选项。');
              return;
            }

            // 查找当前 issue 的项目项
            const item = project.items.nodes.find(i => 
              i.content?.number === issue.number
            );
            if (!item) {
              core.warning(`未找到 issue #${issue.number} 的项目项。`);
              return;
            }

            // 检查标签并更新状态
            let newStatus = null;
            for (const [label, statusName] of Object.entries(labelToStatusOption)) {
              if (issue.labels.some(l => l.name.toLowerCase().includes(label))) {
                newStatus = statusField.options.find(opt => opt.name === statusName);
                if (newStatus) break;
              }
            }

            if (newStatus) {
              // GraphQL 变更：更新项的状态字段
              const mutation = `
                mutation UpdateItemField($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                  updateProjectV2ItemFieldValue(
                    input: {
                      projectId: $projectId
                      itemId: $itemId
                      fieldId: $fieldId
                      value: { singleSelectOptionId: $optionId }
                    }
                  ) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `;

              const mutationVariables = {
                projectId: project.id,
                itemId: item.id,
                fieldId: statusField.id,
                optionId: newStatus.id
              };

              await github.rest.graphql(mutation, mutationVariables);
              core.info(`已将 issue #${issue.number} 的状态更新为 "${newStatus.name}"`);
            } else {
              core.info(`issue #${issue.number} 无匹配标签，无需更新。`);
            }

  ai-bot-trigger:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && contains(github.event.issue.labels.*.name, '🌱 seed')
    steps:
      - name: Trigger AI Bot analysis
        run: |
          echo "新种子议题 #${{ github.event.issue.number }} 需要AI分析"
          # 实现您的 AI bot API 调用，例如：
          # curl -X POST https://your-ai-bot.com/analyze \
          #   -H "Authorization: Bearer ${{ secrets.AI_BOT_TOKEN }}" \
          #   -H "Content-Type: application/json" \
          #   -d '{"issue": ${{ toJson(github.event.issue) }}}'
